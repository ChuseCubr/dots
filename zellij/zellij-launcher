#!/usr/bin/env bash

# Set these settings after sourcing this file

# Where to fuzzy search when creating a new session
ZELLIJ_LAUNCER_DIRS="$PWD"

# How deep to fuzzy search
ZELLIJ_LAUNCER_MIN_DIR_DEPTH=0
ZELLIJ_LAUNCER_MAX_DIR_DEPTH=3

# fzf settings
ZELLIJ_LAUNCER_FZF_OPTS="--layout=reverse --inline-info --border --header-first --cycle"

# allow the runner/sessionizer run inside Zellij
ZELLIJ_LAUNCER_ALLOW_NEST=1

# Pretty header
ZELLIJ_LAUNCER_BANNER="
███████╗███████╗██╗     ██╗     ██╗     ██╗
╚══███╔╝██╔════╝██║     ██║     ██║     ██║
  ███╔╝ █████╗  ██║     ██║     ██║     ██║
 ███╔╝  ██╔══╝  ██║     ██║     ██║██   ██║
███████╗███████╗███████╗███████╗██║╚█████╔╝
╚══════╝╚══════╝╚══════╝╚══════╝╚═╝ ╚════╝ "

# change this function name or alias it if you want
zr() {
	local locations="$ZELLIJ_LAUNCER_DIRS"
	local find_opts="-mindepth $ZELLIJ_LAUNCER_MIN_DIR_DEPTH -maxdepth $ZELLIJ_LAUNCER_MAX_DIR_DEPTH"
	local banner="$ZELLIJ_LAUNCER_BANNER"$'\n'
	local banner_height="$(echo -e "$banner" | grep -c "^")"
	local init_fzf_opts="$ZELLIJ_LAUNCER_FZF_OPTS"

	while true; do
		local sessions_string="$(zellij list-sessions)"
		local current_session
		local header
		local choices
		local selection

		if [[ "$ZELLIJ_LAUNCER_ALLOW_NEST" == "1" ]]; then
			# extract current session
			local idx=0
			local sessions=""
			while read -r session; do
				if [[ "$session" == *" (current)" ]]; then
					current_session="${session/ (current)/}"
					continue
				fi
				if [[ $idx -gt 0 ]]; then
					sessions+=$'\n'
				fi
				sessions+=$session
				idx+=1
			done <<<"$sessions_string"
		else
			if [[ "$sessions_string"$'\n' == *" (current)"$'\n'* ]]; then
				echo "Already in a Zellij session!"
				break
			fi
		fi

		header="$banner"
		if [[ -n "$current_session" ]]; then
			header+="Current session: $current_session"$'\n'$'\n'
			header_height="$((banner_height + 1))"
		else
			header+=$'\n'
			header_height="$banner_height"
		fi
		fzf_opts="$init_fzf_opts --header-lines=$header_height"

		choices="$header"
		choices+="Create new session"$'\n'
		choices+="Kill session"$'\n'
		choices+="$sessions"

		selection="$(
			echo -ne "$choices" |
				fzf --prompt='Attach to session: ' $fzf_opts
		)"

		case "$selection" in
		"")
			break
			;;

		"Kill session")
			local session
			local confirm

			choices="$header"
			if [[ -n "$sessions" ]]; then
				choices+="$sessions"
			fi
			if [[ -n "$sessions" && -n "$current_session" ]]; then
				choices+=$'\n'
			fi
			if [[ -n "$current_session" ]]; then
				choices+="$current_session"
			fi

			session="$(
				echo -ne "$choices" |
					fzf --prompt="Kill session: " $fzf_opts
			)"

			if [[ -z "$session" ]]; then
				continue
			fi

			choices="$header"
			confirm="$(
				echo -ne "$header" |
					fzf --prompt="Are you sure you want to kill $session? (y/n): " --print-query $fzf_opts
			)"

			case "${confirm,,}" in
			"y" | "yes")
				echo "Killing $session..."
				zellij k $session
				;;

			"*")
				continue
				;;

			esac
			;;

		"Create new session")
			local location
			local query_opts
			local session_name
			local current_dir

			choices="$header"
			choices+="$(find $locations $find_opts -type d)"
			location="$(
				echo -ne "$choices" |
					fzf --prompt="New session directory: " $fzf_opts
			)"

			if [[ -z "$location" ]]; then
				continue
			fi

			choices="$header"
			choices+="Taken names:"$'\n'
			if [[ -n "$current_session" ]]; then
				sessions="$current_session"$'\n'"$sessions"
			fi
			choices+="$sessions"

			query_opts="--query=${location##*/} --print-query --disabled"
			session_name="$(
				echo -ne "$choices" |
					fzf --prompt="New session name: " $query_opts $fzf_opts |
					head -1
			)"

			# Match from newline to newline to allow similar (substring) names
			while [[ $'\n'"$sessions"$'\n' == *$'\n'"$session_name"$'\n'* ]]; do
				if [[ -z "$session_name" ]]; then
					break
				fi

				choices="$header"
				choices+="$session_name already exists!"$'\n'
				choices+="Taken names:"$'\n'
				choices+="$sessions"

				local session_name="$(
					echo -ne "$choices" |
						fzf --prompt="New session name: " $query_opts $fzf_opts |
						head -1
				)"
			done

			if [[ -z "$session_name" ]]; then
				continue
			fi

			current_dir="$PWD"
			cd $location && zellij -s $session_name
			cd "$current_dir"
			;;

		*)
			zellij a $selection
			;;

		esac
	done
}

zs() {
	local locations="$ZELLIJ_LAUNCER_DIRS"
	local find_opts="-mindepth $ZELLIJ_LAUNCER_MIN_DIR_DEPTH -maxdepth $ZELLIJ_LAUNCER_MAX_DIR_DEPTH"
	local banner="$ZELLIJ_LAUNCER_BANNER"$'\n'
	local banner_height="$(echo -e "$banner" | grep -c "^")"
	local init_fzf_opts="$ZELLIJ_LAUNCER_FZF_OPTS"
	local last_session

	while true; do
		local sessions_string="$(zellij list-sessions)"
		local current_session
		local header
		local choices
		local selection

		if [[ "$ZELLIJ_LAUNCER_ALLOW_NEST" == "1" ]]; then
			# extract current session
			local idx=0
			local sessions=""
			while read -r session; do
				if [[ "$session" == *" (current)" ]]; then
					current_session="${session/ (current)/}"
					continue
				fi
				if [[ $idx -gt 0 ]]; then
					sessions+=$'\n'
				fi
				sessions+=$session
				idx+=1
			done <<<"$sessions_string"
		else
			if [[ "$sessions_string"$'\n' == *" (current)"$'\n'* ]]; then
				echo "Already in a Zellij session!"
				break
			fi
		fi

		header="$banner"
		if [[ -n "$current_session" ]]; then
			header+="Current session: $current_session"$'\n'$'\n'
			header_height="$((banner_height + 1))"
		else
			header+=$'\n'
			header_height="$banner_height"
		fi
		fzf_opts="$init_fzf_opts --header-lines=$header_height"

		local location
		local query_opts
		local session_name
		local current_dir

		choices="$header"
		choices+="Quit"$'\n'
		choices+="$sessions"$'\n'
		choices+="$(find $locations $find_opts -type d)"
		location="$(
			echo -ne "$choices" |
				fzf --prompt="New session directory: " $fzf_opts
		)"
		session_name="${location##*/}"

		if [[ -z "$location" ]]; then
			if [[ -z "$last_session" ]]; then
				break
			fi
			zellij a "$last_session"
		elif [[ "$location" == "Quit" ]]; then
			break
		elif [[ $'\n'"$sessions"$'\n' == $'\n'"$location"$'\n' ]]; then
			zellij a "$location"
		else
			current_dir="$PWD"
			cd $location && zellij a -c $session_name
			cd "$current_dir"
			last_session=$session_name
		fi
	done
}
